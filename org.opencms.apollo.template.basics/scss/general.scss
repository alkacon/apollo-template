//
// Alkacon Apollo SCSS.
// 
// Generic helpers. 
//

//Screen sizes (https://github.com/twbs/bootstrap/blob/master/less/variables.less)

$screen-sm-min: 768px;
$screen-md-min: 992px;
$screen-lg-min: 1200px;

/* Generic helpers. For further information please read css-doc.md
----------------------------------------------------------------------------- */    


// Returns a readable color depending on the given color 
@function set-text-color($color) {
  @if (lightness($color) > 60) {
    @return $text-dark; 
  } @else {
    @return $text-light; 
  }
}

//link color
@each $name, $color in $colors {
    .lc-#{""+$name}{
        a, &.a{
            color: $color;      
        }
    }
    .lch-#{""+$name}{
        a, &.a{
         &:hover, &:active, &:focus, &:hover{
                color: $color;  
            }   
        }
    }
}
.l-nu {
    a, &.a{
        text-decoration: none;
    }
}

//square and tile grid
   
.square {
    .inner{
        float:left;
        position: relative;
        background-position:center center;
        background-repeat:no-repeat;
        background-size:cover;
        overflow: hidden;
        a{
            display: block;
            width: 100%;
            height: 100%;
        }
    }
    &:hover .title{
        bottom: 0;
        transition: bottom 1s;              
    }   
    .title{
        padding: 10px;
        color: #fff;
        background-color: rgba(0,0,0,0.2);
        position: absolute;
        bottom: -100px;
        width: 100%;
        transition: bottom 1s;
    }
    
    .content{
        position: absolute; 
        padding: 0;
        img{
            width: 100%;
            height: 100%;
        }
    }
}    

.tile { 
    float: left;
    position: relative;
    min-height: 1px;
    white-space: nowrap;
}

$maxCols: 12; 
@mixin make-square($size)   {  
    @for $i from 1 through $maxCols{ 
        $width: 100/($maxCols/$i);
        $margin: 2;
        @if $i == $maxCols {
            $margin: 0; 
        }   
    
        .square-#{$size}-#{$i} {
            .inner{
                    width: calc(#{$width}% - #{$margin*2}px);
                    padding-bottom : calc(#{$width}% - #{$margin*2}px); 
                    @if $i == $maxCols {
                        margin: 2px 0;  
                    }@else{
                        margin: #{$margin}px;                       
                    }           
            }
        }
    }
}

@mixin make-tile($size)   {  
    @for $i from 1 through $maxCols{ 
        $width: 100/($maxCols/$i);
        $margin: 2;
        $padding: 10;
        @if $i == $maxCols {
            $margin: 0; 
        }
    
        .tile-#{$size}-#{$i} {
            width: calc(#{$width}% - #{$margin*2}px);
            @if $i == $maxCols {
                margin: 2px 0;  
            }@else{
                margin: #{$margin}px;
                padding: 0 #{$padding}px
                    
                                
            }           
        }
    }
}

@each $size in (xs,sm,md,lg){
@for $i from 1 through $maxCols{ 
        .square-#{$size}-#{$i} {
            @extend .square;
        }
        @include make-square($size);
        .tile-#{$size}-#{$i} {
            @extend .tile;
        }
        @include make-tile($size);      
    }
}
@include make-square(xs);       
@include make-tile(xs);     

@media (min-width: $screen-sm-min){ 
    @include make-square(sm);   
    @include make-tile(sm);
}   
@media (min-width: $screen-md-min){ 
    @include make-square(md);
    @include make-tile(md);
}       
@media (min-width: $screen-lg-min){ 
    @include make-square(lg);
    @include make-tile(lg);
}       

//Image gallery animation
.comein {
    transform: translateY(150px);
    animation: come-in 0.8s ease forwards;
    &:nth-child(odd) {
        animation-duration: 0.6s; /* So they look staggered */
    }
}


@keyframes come-in {
  to { transform: translateY(0); }
}

//spinner animation
@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(180deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.spinner{
    width: 25px;    
    height: auto;
    font-size: 25px;
    position: absolute;
    transform: translateY(-50%);
    &, a &  {
        color: $gray;
    }
    
    left: 50%;
    i{
        animation: spinner 1s infinite;
    }
}

/* Social color helpers.
----------------------------------------------------------------------------- */

// Social general colors
$social-links-bg: transparent;
$social-links-border: #737373;
$social-links-text: #d6d6d6;
$social-links-text-hover: #ffffff;

// Fixed social colors
$color-facebook:    #3b5998;
$color-googleplus:  #dd4b39;
$color-youtube:     #b31217;
$color-twitter:     #55acee;
$color-linkedin:    #0976b4;
$color-github:      #777777;
$color-slideshare:  #e98325;
$color-xing:        #126567;
$color-rss:         #ee802f;

// Map to generate the social icon styles with
$social-links:  (facebook, $color-facebook),  
                (googleplus, $color-googleplus), 
                (youtube, $color-youtube), 
                (twitter, $color-twitter), 
                (github, $color-github),
                (xing, $color-xing),
                (rss, $color-rss),
                (slideshare, $color-slideshare);
                
.social-links li a {
    color: $social-links-text;
    background-color: transparent;
    border-color: $social-links-border;
}
.social-links li a:hover {
    color: $social-links-text-hover;
    background-color: $social-links-border;
    border-color: $social-links-border;
}

@each $social-link, $social-color in $social-links {
.social-links li.#{$social-link} a:hover,
.colored.social-links li.#{$social-link} a {
        background-color: $social-color;
        border-color: $social-color;
        color: $social-links-text-hover;
    }
}


