// This program is part of the OpenCms Apollo Template.
//
// Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/**********
 * Source file: apollo-tiles.scss
 *
 * Styles used for floating tiles and squares.
 * Used e.g. by the image gallery.
 */

// Apollo tiles and squares
   
$ti-maxCols:    12 !default; 
$ti-margin:     0 !default;

// ALL columns: 1         2       3       4       5           6      8           10          12
//    $ti-cols: ((12, 12), (6, 6), (4, 4), (3, 3), (2o4, 2.4), (2,2), (1o5, 1.5), (1o2, 1.2), (1,1)) !default;
$ti-cols:       ((4, 4), (3, 3), (2o4, 2.4), (2,2), (1o5, 1.5)) !default;

$sq-maxCols:    12 !default; 
$sq-margin:     0 !default;
$sq-margins:    (2, 4, 5, 10, 20, 25, 50, 100) !default;
$sq-padding:    20 !default;

// $fix-cols:   (50, 100, 125, 150, 200, 250) !default;
$fix-cols:      (100, 125, 150, 200) !default;

$sizes:         ("xs", "sm", "md", "lg") !default;

$sq-cols-xs:       ((12, 12), (6, 6)) !default;
$sq-cols-sm:       ((12, 12), (9, 9), (6, 6), (4, 4), (3, 3)) !default;
$sq-cols-md:       ((12, 12), (9, 9), (6, 6), (4, 4), (3, 3), (2,2)) !default;
$sq-cols-lg:       ((12, 12), (9, 9), (6, 6), (4, 4), (3, 3), (2,2)) !default;

@function get-square-cols($size) {
  @if ($size == "xs") {
     @return $sq-cols-xs;
  } @else if ($size == "sm") {
     @return $sq-cols-sm;
  } @else if ($size == "md") {
     @return $sq-cols-md;
  } @else {
     @return $sq-cols-lg;
  }
}

//                1/6            1/4           1/3           1/2          1.5           2
// $sq-heights: ((0o16, 0.166), (0o25, 0.25), (0o33, 0.332), (0o5, 0.5), (1o5, 1.499), (2, 2)) !default;

$sq-heights-xs:    ((99, 99), (2, 2)) !default;
$sq-heights-sm:    ((0o5, 0.5), (1o5, 1.5), (2, 2)) !default;
$sq-heights-md:    ((0o5, 0.5), (1o5, 1.5), (2, 2)) !default;
$sq-heights-lg:    ((0o25, 0.25), (0o5, 0.5), (1o5, 1.5), (2, 2)) !default;

@function get-square-heights($size) {
  @if ($size == "xs") {
     @return $sq-heights-xs;
  } @else if ($size == "sm") {
     @return $sq-heights-sm;
  } @else if ($size == "md") {
     @return $sq-heights-md;
  } @else {
     @return $sq-heights-lg;
  }
}

/** 
 * Squares
 *
 * For the basics of this square tile solution, see
 * http://stackoverflow.com/questions/20456694/grid-of-responsive-squares
 */

/* Base square definition */

.ap-square { 

    float: left;
    position: relative;
    width: 100%;
    padding: 0 0 100% 0 !important; // !important because the "padding-bottom: 100%" is what makes the squares sqaure
}

@mixin make-ap-square($size)   { 

    @each $i, $sq-i in get-square-cols($size) { 
        $sq-width: 100%/($sq-maxCols/$sq-i);

        .square-#{$size}-#{$i} { 
           // creates the media query square versions like .square-md-5 etc.
            width: $sq-width;
            padding-bottom: $sq-width !important;

            @each $h, $sq-h in get-square-heights($size) {
                @if ($h != 99) {
                    &-h-#{$h} { 
                        // allows adjustmets of square height 
                        width: $sq-width; 
                        padding-bottom: #{$sq-width * $sq-h} !important;
                    }
                }
            }
        }
    }
}


/* Required inner square class, the "position: absolute" does the trick */

.ap-square .content { 

    position: absolute !important; // !important because otherwise OpenCms ADE will mix up the grid
    height: 100%;
    width: 100%;
    margin: 0;
    overflow: hidden;
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
}


/* Allows to set the margin in the squares */

@each $m in $sq-margins  { 
    .ap-square.square-m-#{$m} .content {
        height: calc(100% - #{$m * 2}px);
        width:  calc(100% - #{$m * 2}px);
        margin: #{$m}px;
    }
}


/* Table needed for aligment of content inside square */

.ap-square .table { 

    display: table;  
    height: 100%;
    width: 100%;
}


/* Table cell needed for aligment of content inside square */

.ap-square .table-cell { 

    display: table-cell;
    vertical-align: middle;
    height: 100%;
    width: 100%;
}


/* Tile basic definition */

.ap-tile { 
    float: left;
    position: relative;
    min-height: 1px;
    white-space: nowrap;
    width: calc(100% - #{$ti-margin*2}px);
    margin: #{$ti-margin}px;
}


@mixin make-ap-tile($size)   {  

    @each $i, $ti-i in $ti-cols { 

        $ti-width: 100/($ti-maxCols/$ti-i);

        .tile-#{$size}-#{$i} {
            width: calc(#{$ti-width}% - #{$ti-margin*2}px);
            @if $i == $ti-maxCols {
                margin: #{$ti-margin}px 0;
            } @else {
                margin: #{$ti-margin}px;
            } 
        }
    }
}


/* Fixed with columns base */

.fixcol { 
    float: left;
    position: relative;
    min-height: 1px;
    padding-right: #{$gutter};
    padding-left: #{$gutter};
    width: 100%;
}


// extend the fixed with column as base responsive instance
@each $i in $fix-cols { 
    @each $size in $sizes {
        .fixcol-#{$size}-#{$i},
        .fixcol-#{$size}-#{$i}-rest {
            @extend .fixcol;
        } 
    }
}

// creates a fixed with column
@mixin make-fixcol($size)   { 
    @each $i in $fix-cols {
        $fixsize: ($i + 2 * $gutter);
        // the fixed with column
        .fixcol-#{$size}-#{$i} { 
            // add the gutter so that the column pixel size is what the class says
            width: $fixsize; 
        }
        // if fixed size ($i) is 0 we use the default 100%, otherwise the gutter would be substracted
        @if ($i > 0) { 
            // the rest of the column
            .fixcol-#{$size}-#{$i}-rest {
                width: calc(100% - #{$fixsize});
            }
        }
    }
}


/* xs screen size squares */
@include make-ap-square(xs);

/* xs screen size tiles */
@include make-ap-tile(xs);

/* xs screen size fixcols */
@include make-fixcol(xs);

@media (min-width: $screen-sm-min){

    /* sm screen size squares */
    @include make-ap-square(sm);

    /* sm screen size tiles squares */
    @include make-ap-tile(sm);

    /* sm screen size fixcols */
    @include make-fixcol(sm);
}

@media (min-width: $screen-md-min){

    /* md screen size squares */
    @include make-ap-square(md);

    /* md screen size tiles */
    @include make-ap-tile(md);

    /* md screen size fixcols */
    @include make-fixcol(md);
}

@media (min-width: $screen-lg-min){

    /* lg screen size squares */
    @include make-ap-square(lg);

    /* lg screen size tiles */
    @include make-ap-tile(lg);

    /* lg screen size fixcols */
    @include make-fixcol(lg);
}
