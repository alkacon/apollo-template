
// Apollo tiles and squares
   
$ti-maxCols: 12 !default; 
$ti-margin: 0 !default;
// columns: 1         2       3       4       5           6,     8,          10,         12
$ti-cols: ((12, 12), (6, 6), (4, 4), (3, 3), (2o4, 2.4), (2,2), (1o5, 1.5), (1o2, 1.2), (1,1)) !default;

$sq-maxCols: $ti-maxCols !default; 
$sq-margin: 0 !default;
$sq-margins: $spacers !default;
$sq-cols: $ti-cols !default;
$sq-padding: 20 !default;

// Squares

// For the basics of this square tile solution, see
// http://stackoverflow.com/questions/20456694/grid-of-responsive-squares

.ap-square { 
   // base definition that is used if no media query matches
   float: left;
   position: relative;
   width: 100%;
   padding: 0 0 100% 0 !important; // !important because the "padding-bottom: 100%" is what makes the squares sqaure
}

@mixin make-ap-square($size)   { 

    @each $i, $sq-i in $sq-cols { 
        $sq-width: 100%/($sq-maxCols/$sq-i);

        .square-#{$size}-#{$i} { 
           // creates the media query square versions like .square-md-5 etc.
            width: #{$sq-width};
            padding: 0 0 #{$sq-width} 0 !important;

            @each $h, $sq-h in ((0o16, 0.166), (0o25, 0.25), (0o33, 0.332), (0o5, 0.5), (1o5, 1.499), (2, 2)) {             

                &-h-#{$h} { 
                    // allows adjustmets of square height 
                    width: #{$sq-width};                          
                    padding: 0 0 #{$sq-width * $sq-h} 0 !important;            
                }
            }
        }
    }  
}

.ap-square .ap-square-section { 
    // required inner square class, the "position: absolute" does the trick 
    position: absolute !important; // !important because otherwise OpenCms ADE will mix up the grid
    height: 100%;
    width: 100%;
    margin: 0;
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
}

@each $m in $sq-margins  { 
    // allows to set the margin between squares
    .ap-square.square-m-#{$m} .ap-square-section {
        height: calc(100% - #{$m * 2}px);
        width:  calc(100% - #{$m * 2}px);
        margin: #{$m}px;
    }
}

.ap-sq-square { 
    // ensure we can have variable padding squares with hidden overflow
    width: 100%; 
    height: 100%;
    overflow: hidden;    
}

.ap-sq-table { 
    // table needed for aligment of content inside square
    display: table;  
    height: 100%;
    width: 100%;
}

.ap-sq-cell { 
    // table cell needed for aligment of content inside square
    display: table-cell;
    vertical-align: middle;
    height: 100%;
    width: 100%;
}

// Tiles

.ap-tile { 
    float: left;
    position: relative;
    min-height: 1px;
    white-space: nowrap;
    width: calc(100% - #{$ti-margin*2}px);
    margin: #{$ti-margin}px;
}


@mixin make-ap-tile($size)   {  

    @each $i, $ti-i in $ti-cols { 

        $ti-width: 100/($ti-maxCols/$ti-i);

        .tile-#{$size}-#{$i} {
            width: calc(#{$ti-width}% - #{$ti-margin*2}px);
            @if $i == $ti-maxCols {
                margin: #{$ti-margin}px 0;
            } @else {
                margin: #{$ti-margin}px;
            } 
        }
    }
}

// Fixed with columns
// I know that this is not what Bootstrap is about, but hey who cares ;)

$fix-cols: (50, 100, 150, 200, 250) !default;
$sizes: ("xs", "sm", "md", "lg") !default;
$gutter: 15 !default; // this should match the bootstrap gutter used

.fixcol { 
    float: left;
    position: relative;
    min-height: 1px;
    padding-right: #{$gutter}px;
    padding-left: #{$gutter}px;
    width: 100%;
}

// fixed with column base instance
@each $i in $fix-cols { 
    @each $size in $sizes {
        .fixcol-#{$size}-#{$i},
        .fixcol-#{$size}-#{$i}-rest {
            @extend .fixcol;
        } 
    }
}

// creates a fixed with column
@mixin make-fixcol($size)   { 
    @each $i in $fix-cols { 
        // the fixed with column
        .fixcol-#{$size}-#{$i} { 
            // add the gutter so that the column pixel size is what the class says
            width: calc(#{$i}px + 2 * #{$gutter}px); 
        }
        // if fixed size ($i) is 0 we use the default 100%, otherwise the gutter would be substracted
        @if ($i > 0) { 
            // the rest of the column
            .fixcol-#{$size}-#{$i}-rest {
                width: calc(100% - (#{$i}px + 2 * #{$gutter}px));
            }
        }
    }
}

@include make-ap-square(xs);
@include make-ap-tile(xs);
@include make-fixcol(xs);

@media (min-width: $screen-sm-min){
    @include make-ap-square(sm);
    @include make-ap-tile(sm);
    @include make-fixcol(sm);
}

@media (min-width: $screen-md-min){
    @include make-ap-square(md);
    @include make-ap-tile(md);
    @include make-fixcol(md);
}

@media (min-width: $screen-lg-min){
    @include make-ap-square(lg);
    @include make-ap-tile(lg);
    @include make-fixcol(lg);
}
